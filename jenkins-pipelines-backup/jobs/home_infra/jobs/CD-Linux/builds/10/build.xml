<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <org.jenkinsci.plugins.workflow.support.steps.build.BuildUpstreamCause plugin="pipeline-build-step@567.vea_ce550ece97">
            <upstreamProject>home_infra/generate_deployment_pipeline</upstreamProject>
            <upstreamUrl>job/home_infra/job/generate_deployment_pipeline/</upstreamUrl>
            <upstreamBuild>71</upstreamBuild>
            <upstreamCauses>
              <hudson.model.Cause_-UserIdCause>
                <userId>kobeeq</userId>
              </hudson.model.Cause_-UserIdCause>
            </upstreamCauses>
            <nodeId>37</nodeId>
          </org.jenkinsci.plugins.workflow.support.steps.build.BuildUpstreamCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.support.steps.build.BuildUpstreamNodeAction plugin="pipeline-build-step@567.vea_ce550ece97">
      <upstreamNodeId>37</upstreamNodeId>
      <upstreamRunId>home_infra/generate_deployment_pipeline#71</upstreamRunId>
    </org.jenkinsci.plugins.workflow.support.steps.build.BuildUpstreamNodeAction>
    <org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerAction plugin="pipeline-build-step@567.vea_ce550ece97">
      <triggers>
        <org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerAction_-Trigger>
          <context class="org.jenkinsci.plugins.workflow.cps.CpsStepContext" plugin="workflow-cps@4106.v7a_8a_8176d450">
            <executionRef class="flow-owner" plugin="workflow-job@1520.v56d65e3b_4566">
              <job>home_infra/generate_deployment_pipeline</job>
              <id>71</id>
            </executionRef>
            <id>37</id>
            <bodyHeads/>
            <threadId>18</threadId>
            <stepDescriptorId>org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerStep</stepDescriptorId>
          </context>
          <propagate>true</propagate>
          <waitForStart>false</waitForStart>
        </org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerAction_-Trigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerAction>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.StringParameterValue>
          <name>TARGET_HOST</name>
          <description>Target Linux host from inventory</description>
          <value>server</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>PLAYBOOK</name>
          <description>Playbook to run on Linux</description>
          <value>server.yml</value>
        </hudson.model.StringParameterValue>
        <hudson.model.PasswordParameterValue>
          <name>SSH_PASS</name>
          <description>SSH password for the target host</description>
          <value>{AQAAABAAAAAQOFHXa06db6dULUw3JjIiPSC19+W5Bl/owWwFnLrj4Mg=}</value>
        </hudson.model.PasswordParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>TARGET_HOST</string>
        <string>PLAYBOOK</string>
        <string>SSH_PASS</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.2.30-468.v5973151f8cfc">
      <queuingDurationMillis>7097</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>7094</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@752.vdddedf804e72">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35">
      <stagesUUID>5884e36b-2a55-493c-b63d-7c4371b21d8c</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2254.v2a_978de46f35">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Checkout Repository</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>echo</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>message</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">📥 Checking out repository for Linux deployment...</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>checkout</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scm</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">${scm}</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Parse Linux Inventory</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">def inventoryJson = sh(script: &quot;&quot;&quot;
                        python3 -c &apos;
import sys, yaml, json
target = &quot;${params.TARGET_HOST}&quot;
with open(&quot;${env.INVENTORY_FILE}&quot;) as f:
    inv = yaml.safe_load(f)
host_config = None
if &quot;linux&quot; in inv[&quot;all&quot;][&quot;children&quot;]:
    group = inv[&quot;all&quot;][&quot;children&quot;][&quot;linux&quot;]
    if &quot;hosts&quot; in group and target in group[&quot;hosts&quot;]:
        host_config = group[&quot;hosts&quot;][target]
if host_config is None:
    sys.exit(&quot;Host not found in linux group: &quot; + target)
print(json.dumps(host_config))
                        &apos;
                    &quot;&quot;&quot;, returnStdout: true).trim()

                    def hostConfig = readJSON text: inventoryJson

                    env.TARGET_IP   = hostConfig.ansible_host
                    env.REMOTE_USER = hostConfig.ansible_user
                    env.PRIVATE_KEY = &quot;${env.SSH_BASE_DIR}/${params.TARGET_HOST}/id_rsa&quot;
                    env.PUBLIC_KEY  = &quot;${env.PRIVATE_KEY}.pub&quot;

                    echo &quot;➡ Linux Host: ${params.TARGET_HOST}&quot;
                    echo &quot;➡ IP: ${env.TARGET_IP}&quot;
                    echo &quot;➡ Remote user: ${env.REMOTE_USER}&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Ensure SSH Key Exists</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">def keyExists = sh(script: &quot;[ -f &apos;${env.PRIVATE_KEY}&apos; ] &amp;&amp; echo yes || echo no&quot;, returnStdout: true).trim()

                    if (keyExists == &quot;no&quot;) {
                        echo &quot;🔑 SSH key not found in ${env.PRIVATE_KEY}. Generating...&quot;
                        sh &quot;&quot;&quot;
                            mkdir -p \$(dirname &quot;${env.PRIVATE_KEY}&quot;)
                            ssh-keygen -t rsa -b 4096 -f &quot;${env.PRIVATE_KEY}&quot; -N &apos;&apos;
                            chmod 600 &quot;${env.PRIVATE_KEY}&quot;
                        &quot;&quot;&quot;
                        echo &quot;📤 Sending public key to ${params.TARGET_HOST}...&quot;
                        sh &quot;&quot;&quot;
                            sshpass -p &quot;${params.SSH_PASS}&quot; ssh-copy-id -i &quot;${env.PUBLIC_KEY}&quot; ${env.REMOTE_USER}@${env.TARGET_IP} || true
                        &quot;&quot;&quot;
                    } else {
                        echo &quot;✅ SSH key already exists.&quot;
                        sh &quot;chmod 600 ${env.PRIVATE_KEY}&quot;
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Test SSH Connection</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">def sshTest = sh(script: &quot;&quot;&quot;
                        ssh -o StrictHostKeyChecking=no -i ${env.PRIVATE_KEY} ${env.REMOTE_USER}@${env.TARGET_IP} &apos;echo OK&apos;
                    &quot;&quot;&quot;, returnStatus: true)

                    if (sshTest != 0) {
                        error &quot;❌ ERROR: Unable to establish SSH connection to ${params.TARGET_HOST}.&quot;
                        sh &quot;rm -rfv ${env.SSH_BASE_DIR}/${params.TARGET_HOST}&quot;
                    } else {
                        echo &quot;✅ SSH connection successful.&quot;
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Run Ansible Playbook</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>echo</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>message</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;🚀 Running Linux playbook: ${params.PLAYBOOK} on host ${params.TARGET_HOST}&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;&quot;&quot;
                    cd ${env.PLAYBOOKS_DIR}
                    sshpass -p &quot;${params.SSH_PASS}&quot; ansible-playbook -i ../inventories/hosts.yml ${params.PLAYBOOK} -K --limit ${params.TARGET_HOST} -e &quot;hosts_to_deploy=${params.TARGET_HOST}&quot;
                &quot;&quot;&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>5884e36b-2a55-493c-b63d-7c4371b21d8c</uuid>
          </stages>
          <postBuild>
            <conditions>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>always</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">Deployment finished.</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
            </conditions>
          </postBuild>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>INVENTORY_FILE</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">ansible/inventories/hosts.yml</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>PLAYBOOKS_DIR</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">ansible/playbooks</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>SSH_BASE_DIR</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">/var/jenkins_home/.ssh</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <variables class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
              <value class="string">slave</value>
            </variables>
            <agentType>
              <key>label</key>
            </agentType>
          </agent>
          <parameters>
            <parameters>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
                <name>string</name>
                <args>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>name</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">TARGET_HOST</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>defaultValue</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string"></value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>description</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">Target Linux host from inventory</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                </args>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
                <name>string</name>
                <args>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>name</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">PLAYBOOK</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>defaultValue</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string"></value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>description</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">Playbook to run on Linux</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                </args>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
                <name>password</name>
                <args>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>name</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">SSH_PASS</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>defaultValue</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string"></value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                    <key>
                      <key>description</key>
                    </key>
                    <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                      <value class="string">SSH password for the target host</value>
                    </value>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKeyValueOrMethodCallPair>
                </args>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildParameter>
            </parameters>
          </parameters>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder plugin="credentials@1415.v831096eb_5534">
      <boundCredentials class="concurrent-hash-map"/>
    </com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder>
    <hudson.plugins.git.util.BuildData plugin="git@5.7.0">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/main</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@6.1.3">
              <sha1>d776d3aa5d2555a07da39016d25697d75465affb</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/main</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>10</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
        <entry>
          <string>refs/remotes/origin/feature/windows</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@6.1.3">
              <sha1>afe2762ef8219c35748104305ede67df498762e9</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/feature/windows</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision plugin="git-client@6.1.3">
              <sha1 reference="../../marked/sha1"/>
              <branches class="list">
                <hudson.plugins.git.Branch reference="../../../marked/branches/hudson.plugins.git.Branch"/>
              </branches>
            </revision>
            <hudsonBuildNumber>1</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/Kobeep/home_infra.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@437.v05a_f66b_e5ef8">
      <revisionStates>
        <entry>
          <string>git https://github.com/Kobeep/home_infra.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@4106.v7a_8a_8176d450">
      <env class="tree-map">
        <entry>
          <string>PRIVATE_KEY</string>
          <string>/var/jenkins_home/.ssh/server/id_rsa</string>
        </entry>
        <entry>
          <string>PUBLIC_KEY</string>
          <string>/var/jenkins_home/.ssh/server/id_rsa.pub</string>
        </entry>
        <entry>
          <string>REMOTE_USER</string>
          <string>server</string>
        </entry>
        <entry>
          <string>TARGET_IP</string>
          <string>192.168.0.229</string>
        </entry>
      </env>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction plugin="workflow-cps@4106.v7a_8a_8176d450">
      <interpolatedWarnings>
        <org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction_-InterpolatedWarnings>
          <stepName>sh</stepName>
          <interpolatedVariables>
            <string>SSH_PASS</string>
          </interpolatedVariables>
        </org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction_-InterpolatedWarnings>
      </interpolatedWarnings>
    </org.jenkinsci.plugins.workflow.cps.view.InterpolatedSecretsAction>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.2.30-468.v5973151f8cfc">
      <queuingDurationMillis>6</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>5</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
      <executingDurationMillis>10613</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>245</queueId>
  <timestamp>1745345553927</timestamp>
  <startTime>1745345553939</startTime>
  <result>FAILURE</result>
  <duration>11590</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>pipeline {
    agent { label &apos;slave&apos; }

    parameters {
        string(name: &apos;TARGET_HOST&apos;, defaultValue: &apos;&apos;, description: &apos;Target Linux host from inventory&apos;)
        string(name: &apos;PLAYBOOK&apos;, defaultValue: &apos;&apos;, description: &apos;Playbook to run on Linux&apos;)
        password(name: &apos;SSH_PASS&apos;, defaultValue: &apos;&apos;, description: &apos;SSH password for the target host&apos;)
    }

    environment {
        INVENTORY_FILE = &apos;ansible/inventories/hosts.yml&apos;
        PLAYBOOKS_DIR  = &apos;ansible/playbooks&apos;
        SSH_BASE_DIR   = &apos;/var/jenkins_home/.ssh&apos;
    }

    stages {
        stage(&apos;Checkout Repository&apos;) {
            steps {
                echo &quot;📥 Checking out repository for Linux deployment...&quot;
                checkout scm
            }
        }

        stage(&apos;Parse Linux Inventory&apos;) {
            steps {
                script {
                    // Execute Python script to parse the inventory for the given Linux host
                    def inventoryJson = sh(script: &quot;&quot;&quot;
                        python3 -c &apos;
import sys, yaml, json
target = &quot;${params.TARGET_HOST}&quot;
with open(&quot;${env.INVENTORY_FILE}&quot;) as f:
    inv = yaml.safe_load(f)
host_config = None
if &quot;linux&quot; in inv[&quot;all&quot;][&quot;children&quot;]:
    group = inv[&quot;all&quot;][&quot;children&quot;][&quot;linux&quot;]
    if &quot;hosts&quot; in group and target in group[&quot;hosts&quot;]:
        host_config = group[&quot;hosts&quot;][target]
if host_config is None:
    sys.exit(&quot;Host not found in linux group: &quot; + target)
print(json.dumps(host_config))
                        &apos;
                    &quot;&quot;&quot;, returnStdout: true).trim()

                    def hostConfig = readJSON text: inventoryJson

                    env.TARGET_IP   = hostConfig.ansible_host
                    env.REMOTE_USER = hostConfig.ansible_user
                    env.PRIVATE_KEY = &quot;${env.SSH_BASE_DIR}/${params.TARGET_HOST}/id_rsa&quot;
                    env.PUBLIC_KEY  = &quot;${env.PRIVATE_KEY}.pub&quot;

                    echo &quot;➡ Linux Host: ${params.TARGET_HOST}&quot;
                    echo &quot;➡ IP: ${env.TARGET_IP}&quot;
                    echo &quot;➡ Remote user: ${env.REMOTE_USER}&quot;
                }
            }
        }

        stage(&apos;Ensure SSH Key Exists&apos;) {
            steps {
                script {
                    def keyExists = sh(script: &quot;[ -f &apos;${env.PRIVATE_KEY}&apos; ] &amp;&amp; echo yes || echo no&quot;, returnStdout: true).trim()

                    if (keyExists == &quot;no&quot;) {
                        echo &quot;🔑 SSH key not found in ${env.PRIVATE_KEY}. Generating...&quot;
                        sh &quot;&quot;&quot;
                            mkdir -p \$(dirname &quot;${env.PRIVATE_KEY}&quot;)
                            ssh-keygen -t rsa -b 4096 -f &quot;${env.PRIVATE_KEY}&quot; -N &apos;&apos;
                            chmod 600 &quot;${env.PRIVATE_KEY}&quot;
                        &quot;&quot;&quot;
                        echo &quot;📤 Sending public key to ${params.TARGET_HOST}...&quot;
                        sh &quot;&quot;&quot;
                            sshpass -p &quot;${params.SSH_PASS}&quot; ssh-copy-id -i &quot;${env.PUBLIC_KEY}&quot; ${env.REMOTE_USER}@${env.TARGET_IP} || true
                        &quot;&quot;&quot;
                    } else {
                        echo &quot;✅ SSH key already exists.&quot;
                        sh &quot;chmod 600 ${env.PRIVATE_KEY}&quot;
                    }
                }
            }
        }

        stage(&apos;Test SSH Connection&apos;) {
            steps {
                script {
                    def sshTest = sh(script: &quot;&quot;&quot;
                        ssh -o StrictHostKeyChecking=no -i ${env.PRIVATE_KEY} ${env.REMOTE_USER}@${env.TARGET_IP} &apos;echo OK&apos;
                    &quot;&quot;&quot;, returnStatus: true)

                    if (sshTest != 0) {
                        error &quot;❌ ERROR: Unable to establish SSH connection to ${params.TARGET_HOST}.&quot;
                        sh &quot;rm -rfv ${env.SSH_BASE_DIR}/${params.TARGET_HOST}&quot;
                    } else {
                        echo &quot;✅ SSH connection successful.&quot;
                    }
                }
            }
        }

        stage(&apos;Run Ansible Playbook&apos;) {
            steps {
                echo &quot;🚀 Running Linux playbook: ${params.PLAYBOOK} on host ${params.TARGET_HOST}&quot;
                sh &quot;&quot;&quot;
                    cd ${env.PLAYBOOKS_DIR}
                    sshpass -p &quot;${params.SSH_PASS}&quot; ansible-playbook -i ../inventories/hosts.yml ${params.PLAYBOOK} -K --limit ${params.TARGET_HOST} -e &quot;hosts_to_deploy=${params.TARGET_HOST}&quot;
                &quot;&quot;&quot;
            }
        }
    }

    post {
        always {
            echo &quot;Deployment finished.&quot;
        }
    }
}
</script>
    <loadedScripts class="linked-hash-map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>626539694</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>144938646</long>
      </entry>
      <entry>
        <string>runQueue</string>
        <long>2674747453</long>
      </entry>
      <entry>
        <string>run</string>
        <long>2052602240</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>84382058</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>636711426</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set">
      <string>hudson.model.Result.fromString</string>
      <string>org.jenkinsci.plugins.workflow.job.WorkflowRun.result</string>
    </internalCalls>
    <sandbox>true</sandbox>
    <iota>71</iota>
    <head>1:71</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
    <storageDir>workflow-completed</storageDir>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@5.7.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/Kobeep/home_infra.git</url>
            <credentialsId>7a5fcd35-3a38-4511-a275-881c11e6625d</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/main</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node>slave</node>
      <workspace>/var/jenkins_home/workspace/home_infra/CD-Linux</workspace>
      <changelogFile>/var/jenkins_home/jobs/home_infra/jobs/CD-Linux/builds/10/changelog9100864715456105154.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" reference="../../org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout/scm"/>
      <node>slave</node>
      <workspace>/var/jenkins_home/workspace/home_infra/CD-Linux</workspace>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>