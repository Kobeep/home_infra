<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction plugin="workflow-cps@4106.v7a_8a_8176d450">
      <replacementLoadedScripts/>
      <sandbox>true</sandbox>
    </org.jenkinsci.plugins.workflow.cps.replay.ReplayFlowFactoryAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>kobeeq</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
        <entry>
          <org.jenkinsci.plugins.workflow.cps.replay.ReplayCause plugin="workflow-cps@4106.v7a_8a_8176d450">
            <originalNumber>7</originalNumber>
          </org.jenkinsci.plugins.workflow.cps.replay.ReplayCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.2.30-468.v5973151f8cfc">
      <queuingDurationMillis>6</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>2</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@752.vdddedf804e72">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2254.v2a_978de46f35">
      <stagesUUID>7c4c0812-ae5d-490f-86f8-782ed8cb9a3b</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2254.v2a_978de46f35">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Checkout Repo</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>checkout</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scm</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">${scm}</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Parse Inventory</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">def inv = readYaml file: &quot;${INVENTORY_FILE}&quot;
                    def cfg = inv.all.children.values()
                                .find { it.hosts?.containsKey(HOST_NAME) }
                                ?.hosts[HOST_NAME]
                    if (!cfg) error &quot;Host &apos;${HOST_NAME}&apos; not found&quot;
                    env.REMOTE_HOST = cfg.ansible_host
                    env.REMOTE_USER = cfg.ansible_user</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Clean old configs</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;rm -rf ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Fetch configs via kubectl cp</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">sh &apos;&apos;&apos;
                  set -e
                  KEY_PATH=&quot;${SSH_BASE}/${HOST_NAME}/id_rsa&quot;

                  # --- Home Assistant ---
                  mkdir -p &quot;$HASS_LOCAL&quot;
                  HA_POD=$(ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                    &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                    &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                    kubectl -n home get pod -l app=home-assistant \
                    -o jsonpath=&apos;{.items[0].metadata.name}&apos;&quot; 2&gt;/dev/null || true)
                  if [ -n &quot;$HA_POD&quot; ]; then
                    ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                      &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                      &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                      kubectl -n home cp home/$HA_POD:/config -&quot; \
                      | tar -xz -C &quot;$HASS_LOCAL&quot;
                  else
                    echo &quot;⚠️ Home Assistant pod not found; skipping.&quot;
                  fi

                  # --- Dashy ---
                  mkdir -p &quot;$DASHY_LOCAL&quot;
                  DASHY_POD=$(ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                    &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                    &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                    kubectl -n monitoring get pod -l app=dashy \
                    -o jsonpath=&apos;{.items[0].metadata.name}&apos;&quot; 2&gt;/dev/null || true)
                  if [ -n &quot;$DASHY_POD&quot; ]; then
                    ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                      &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                      &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                      kubectl -n monitoring cp monitoring/$DASHY_POD:/app/public/conf.yml -&quot; \
                      &gt; &quot;$DASHY_LOCAL/conf.yml&quot;
                  else
                    echo &quot;⚠️ Dashy pod not found; skipping.&quot;
                  fi

                  # --- Grafana ---
                  mkdir -p &quot;$GRAFANA_LOCAL&quot;
                  GRAFANA_POD=$(ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                    &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                    &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                    kubectl -n monitoring get pod -l app=grafana \
                    -o jsonpath=&apos;{.items[0].metadata.name}&apos;&quot; 2&gt;/dev/null || true)
                  if [ -n &quot;$GRAFANA_POD&quot; ]; then
                    ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                      &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                      &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                      kubectl -n monitoring cp monitoring/$GRAFANA_POD:/var/lib/grafana -&quot; \
                      | tar -xz -C &quot;$GRAFANA_LOCAL&quot;
                  else
                    echo &quot;⚠️ Grafana pod not found; skipping.&quot;
                  fi
                &apos;&apos;&apos;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Commit &amp; Push to Git</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">
                git add ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}
                if git diff --cached --quiet; then
                  echo &quot;No changes to commit.&quot;
                else
                  git commit -m &quot;Backup configs from ${HOST_NAME}: $(date -u +&apos;%Y-%m-%d %H:%M:%S UTC&apos;)&quot;
                  git push origin HEAD:main
                fi
                </value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>7c4c0812-ae5d-490f-86f8-782ed8cb9a3b</uuid>
          </stages>
          <postBuild>
            <conditions>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>success</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">Backup completed.</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>failure</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">Backup failed! Check the logs.</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
            </conditions>
          </postBuild>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>INVENTORY_FILE</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">ansible/inventories/hosts.yml</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>HOST_NAME</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">server</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>SSH_BASE</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">/var/jenkins_home/.ssh</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>HASS_LOCAL</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">hass-config</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>DASHY_LOCAL</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">dashy-config</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>GRAFANA_LOCAL</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">grafana-config</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <variables class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
              <value class="string">slave</value>
            </variables>
            <agentType>
              <key>label</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder plugin="credentials@1415.v831096eb_5534">
      <boundCredentials class="concurrent-hash-map"/>
    </com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder>
    <hudson.plugins.git.util.BuildData plugin="git@5.7.0">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/main</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@6.1.3">
              <sha1>46b558b1497a6b3be29b5fe657dd8b64f9bdc888</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/main</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>8</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/Kobeep/home_infra.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@437.v05a_f66b_e5ef8">
      <revisionStates>
        <entry>
          <string>git https://github.com/Kobeep/home_infra.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@4106.v7a_8a_8176d450">
      <env class="tree-map">
        <entry>
          <string>REMOTE_HOST</string>
          <string>192.168.0.229</string>
        </entry>
        <entry>
          <string>REMOTE_USER</string>
          <string>server</string>
        </entry>
      </env>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.2.30-468.v5973151f8cfc">
      <queuingDurationMillis>6</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>5</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
      <executingDurationMillis>29870</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>359</queueId>
  <timestamp>1745519563292</timestamp>
  <startTime>1745519563305</startTime>
  <result>SUCCESS</result>
  <duration>30196</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>pipeline {
    agent { label &apos;slave&apos; }

    environment {
        INVENTORY_FILE = &apos;ansible/inventories/hosts.yml&apos;
        HOST_NAME      = &apos;server&apos;
        SSH_BASE       = &apos;/var/jenkins_home/.ssh&apos;

        HASS_LOCAL     = &apos;hass-config&apos;
        DASHY_LOCAL    = &apos;dashy-config&apos;
        GRAFANA_LOCAL  = &apos;grafana-config&apos;
    }

    stages {
        stage(&apos;Checkout Repo&apos;) {
            steps {
                checkout scm
            }
        }

        stage(&apos;Parse Inventory&apos;) {
            steps {
                script {
                    def inv = readYaml file: &quot;${INVENTORY_FILE}&quot;
                    def cfg = inv.all.children.values()
                                .find { it.hosts?.containsKey(HOST_NAME) }
                                ?.hosts[HOST_NAME]
                    if (!cfg) error &quot;Host &apos;${HOST_NAME}&apos; not found&quot;
                    env.REMOTE_HOST = cfg.ansible_host
                    env.REMOTE_USER = cfg.ansible_user
                }
            }
        }

        stage(&apos;Clean old configs&apos;) {
            steps {
                sh &quot;rm -rf ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}&quot;
            }
        }

        stage(&apos;Fetch configs via kubectl cp&apos;) {
            steps {
              script {
                sh &apos;&apos;&apos;
                  set -e
                  KEY_PATH=&quot;${SSH_BASE}/${HOST_NAME}/id_rsa&quot;

                  # --- Home Assistant ---
                  mkdir -p &quot;$HASS_LOCAL&quot;
                  HA_POD=$(ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                    &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                    &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                    kubectl -n home get pod -l app=home-assistant \
                    -o jsonpath=&apos;{.items[0].metadata.name}&apos;&quot; 2&gt;/dev/null || true)
                  if [ -n &quot;$HA_POD&quot; ]; then
                    ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                      &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                      &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                      kubectl -n home cp home/$HA_POD:/config -&quot; \
                      | tar -xz -C &quot;$HASS_LOCAL&quot;
                  else
                    echo &quot;⚠️ Home Assistant pod not found; skipping.&quot;
                  fi

                  # --- Dashy ---
                  mkdir -p &quot;$DASHY_LOCAL&quot;
                  DASHY_POD=$(ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                    &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                    &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                    kubectl -n monitoring get pod -l app=dashy \
                    -o jsonpath=&apos;{.items[0].metadata.name}&apos;&quot; 2&gt;/dev/null || true)
                  if [ -n &quot;$DASHY_POD&quot; ]; then
                    ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                      &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                      &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                      kubectl -n monitoring cp monitoring/$DASHY_POD:/app/public/conf.yml -&quot; \
                      &gt; &quot;$DASHY_LOCAL/conf.yml&quot;
                  else
                    echo &quot;⚠️ Dashy pod not found; skipping.&quot;
                  fi

                  # --- Grafana ---
                  mkdir -p &quot;$GRAFANA_LOCAL&quot;
                  GRAFANA_POD=$(ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                    &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                    &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                    kubectl -n monitoring get pod -l app=grafana \
                    -o jsonpath=&apos;{.items[0].metadata.name}&apos;&quot; 2&gt;/dev/null || true)
                  if [ -n &quot;$GRAFANA_POD&quot; ]; then
                    ssh -i &quot;$KEY_PATH&quot; -o StrictHostKeyChecking=no \
                      &quot;$REMOTE_USER@$REMOTE_HOST&quot; \
                      &quot;sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml \
                      kubectl -n monitoring cp monitoring/$GRAFANA_POD:/var/lib/grafana -&quot; \
                      | tar -xz -C &quot;$GRAFANA_LOCAL&quot;
                  else
                    echo &quot;⚠️ Grafana pod not found; skipping.&quot;
                  fi
                &apos;&apos;&apos;
              }
            }
          }



        stage(&apos;Commit &amp; Push to Git&apos;) {
            steps {
                sh &apos;&apos;&apos;
                git add ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}
                if git diff --cached --quiet; then
                  echo &quot;No changes to commit.&quot;
                else
                  git commit -m &quot;Backup configs from ${HOST_NAME}: $(date -u +&apos;%Y-%m-%d %H:%M:%S UTC&apos;)&quot;
                  git push origin HEAD:main
                fi
                &apos;&apos;&apos;
            }
        }
    }

    post {
        success { echo &quot;Backup completed.&quot; }
        failure { echo &quot;Backup failed! Check the logs.&quot; }
    }
}
</script>
    <loadedScripts class="linked-hash-map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>431142038</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>235596961</long>
      </entry>
      <entry>
        <string>runQueue</string>
        <long>2143991741</long>
      </entry>
      <entry>
        <string>run</string>
        <long>1634743475</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>98765611</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>554687879</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set">
      <string>hudson.model.Result.fromString</string>
      <string>org.jenkinsci.plugins.workflow.job.WorkflowRun.result</string>
    </internalCalls>
    <sandbox>true</sandbox>
    <iota>58</iota>
    <head>1:58</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
    <storageDir>workflow-completed</storageDir>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@5.7.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/Kobeep/home_infra.git</url>
            <credentialsId>7a5fcd35-3a38-4511-a275-881c11e6625d</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/main</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node>slave</node>
      <workspace>/var/jenkins_home/workspace/home_infra/Config_backup</workspace>
      <changelogFile>/var/jenkins_home/jobs/home_infra/jobs/Config_backup/builds/8/changelog18207855952544375372.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" reference="../../org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout/scm"/>
      <node>slave</node>
      <workspace>/var/jenkins_home/workspace/home_infra/Config_backup</workspace>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>