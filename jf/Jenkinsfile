pipeline {
    agent { label 'slave' }

    environment {
        INVENTORY_FILE = 'ansible/inventories/hosts.yml'
        HOST_NAME      = 'server'
        SSH_BASE       = '/var/jenkins_home/.ssh'

        HASS_LOCAL     = 'hass-config'
        DASHY_LOCAL    = 'dashy-config'
        GRAFANA_LOCAL  = 'grafana-config'
    }

    stages {
        stage('Checkout Repo') {
            steps {
                checkout scm
            }
        }

        stage('Parse Inventory') {
            steps {
                script {
                    def inv = readYaml file: "${INVENTORY_FILE}"
                    def cfg = inv.all.children.values()
                                .find { it.hosts?.containsKey(HOST_NAME) }
                                ?.hosts[HOST_NAME]
                    if (!cfg) error "Host '${HOST_NAME}' not found"
                    env.REMOTE_HOST = cfg.ansible_host
                    env.REMOTE_USER = cfg.ansible_user
                }
            }
        }

        stage('Clean old configs') {
            steps {
                sh "rm -rf ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}"
            }
        }

        stage('Fetch configs via kubectl cp') {
          steps {
            script {
              sh """
                set -e

                # Build path to the private key
                KEY_PATH="${SSH_BASE}/${HOST_NAME}/id_rsa"

                # --- Home Assistant ---
                mkdir -p ${HASS_LOCAL}
                HA_POD=\$(ssh -i "\$KEY_PATH" -o StrictHostKeyChecking=no \\
                  ${REMOTE_USER}@${REMOTE_HOST} \\
                  "kubectl --kubeconfig /root/.kube/config -n home get pod -l app.kubernetes.io/name=home-assistant \\
                  -o jsonpath='{.items[0].metadata.name}'" 2>/dev/null || true)
                if [ -n "\$HA_POD" ]; then
                  ssh -i "\$KEY_PATH" -o StrictHostKeyChecking=no \\
                    ${REMOTE_USER}@${REMOTE_HOST} \\
                    "kubectl --kubeconfig /root/.kube/config -n home cp home/\$HA_POD:/config -" \\
                    | tar -xz -C ${HASS_LOCAL}
                else
                  echo "⚠️ Home Assistant pod not found; skipping config copy."
                fi

                # --- Dashy ---
                mkdir -p ${DASHY_LOCAL}
                DASHY_POD=\$(ssh -i "\$KEY_PATH" -o StrictHostKeyChecking=no \\
                  ${REMOTE_USER}@${REMOTE_HOST} \\
                  "kubectl --kubeconfig /root/.kube/config -n monitoring get pod -l app=dashy \\
                  -o jsonpath='{.items[0].metadata.name}'" 2>/dev/null || true)
                if [ -n "\$DASHY_POD" ]; then
                  ssh -i "\$KEY_PATH" -o StrictHostKeyChecking=no \\
                    ${REMOTE_USER}@${REMOTE_HOST} \\
                    "kubectl --kubeconfig /root/.kube/config -n monitoring cp monitoring/\$DASHY_POD:/app/public/conf.yml -" \\
                    > ${DASHY_LOCAL}/conf.yml
                else
                  echo "⚠️ Dashy pod not found; skipping config copy."
                fi

                # --- Grafana ---
                mkdir -p ${GRAFANA_LOCAL}
                GRAFANA_POD=\$(ssh -i "\$KEY_PATH" -o StrictHostKeyChecking=no \\
                  ${REMOTE_USER}@${REMOTE_HOST} \\
                  "kubectl --kubeconfig /root/.kube/config -n monitoring get pod -l app=grafana \\
                  -o jsonpath='{.items[0].metadata.name}'" 2>/dev/null || true)
                if [ -n "\$GRAFANA_POD" ]; then
                  ssh -i "\$KEY_PATH" -o StrictHostKeyChecking=no \\
                    ${REMOTE_USER}@${REMOTE_HOST} \\
                    "kubectl --kubeconfig /root/.kube/config -n monitoring cp monitoring/\$GRAFANA_POD:/var/lib/grafana -" \\
                    | tar -xz -C ${GRAFANA_LOCAL}
                else
                  echo "⚠️ Grafana pod not found; skipping config copy."
                fi
              """
            }
          }
        }


        stage('Commit & Push to Git') {
            steps {
                sh '''
                git add ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}
                if git diff --cached --quiet; then
                  echo "No changes to commit."
                else
                  git commit -m "Backup configs from ${HOST_NAME}: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
                  git push origin HEAD:main
                fi
                '''
            }
        }
    }

    post {
        success { echo "Backup completed." }
        failure { echo "Backup failed! Check the logs." }
    }
}
