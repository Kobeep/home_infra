pipeline {
    agent { label 'slave' }

    environment {
        INVENTORY_FILE = 'ansible/inventories/hosts.yml'
        HOST_NAME      = 'server'                         // fixed inventory host
        SSH_BASE       = '/var/jenkins_home/.ssh'         // where keys live
        // Remote config locations
        HASS_REMOTE    = '/opt/stacks/home-services/hass-config'
        DASHY_REMOTE   = '/opt/stacks/home-services/dashy/conf.yml'
        GRAFANA_REMOTE = '/opt/stacks/home-services/grafana'
        // Local workspace dirs
        HASS_LOCAL     = 'hass-config'
        DASHY_LOCAL    = 'dashy-config'
        GRAFANA_LOCAL  = 'grafana-config'
    }

    stages {
        stage('Checkout Repo') {
            steps {
                echo "üì• Checking out repository..."
                checkout scm
            }
        }

        stage('Parse Inventory for server') {
            steps {
                script {
                    def inv = readYaml file: "${env.INVENTORY_FILE}"
                    def cfg = inv.all.children.values()
                                .find { it.hosts?.containsKey(env.HOST_NAME) }
                                ?.hosts[env.HOST_NAME]
                    if (!cfg) error "Host '${env.HOST_NAME}' not found in inventory"
                    env.REMOTE_HOST = cfg.ansible_host
                    env.REMOTE_USER = cfg.ansible_user
                    echo "‚û° Found server at ${env.REMOTE_USER}@${env.REMOTE_HOST}"
                }
            }
        }

        stage('Clean old configs') {
            steps {
                echo "üóëÔ∏è Removing old local configs..."
                sh "rm -rf ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}"
            }
        }

        stage('Fetch configs via SCP') {
            steps {
                echo "üîë Fetching configs from ${env.REMOTE_HOST}..."
                script {
                    def key = "${SSH_BASE}/${HOST_NAME}/id_rsa"
                    sh """
                      set -e
                      mkdir -p ${HASS_LOCAL}
                      scp -i ${key} -o StrictHostKeyChecking=no \\
                          ${env.REMOTE_USER}@${env.REMOTE_HOST}:${HASS_REMOTE}/. \\
                          ${HASS_LOCAL}/

                      mkdir -p ${DASHY_LOCAL}
                      scp -i ${key} -o StrictHostKeyChecking=no \\
                          ${env.REMOTE_USER}@${env.REMOTE_HOST}:${DASHY_REMOTE} \\
                          ${DASHY_LOCAL}/conf.yml

                      mkdir -p ${GRAFANA_LOCAL}
                      scp -i ${key} -o StrictHostKeyChecking=no \\
                          ${env.REMOTE_USER}@${env.REMOTE_HOST}:${GRAFANA_REMOTE}/. \\
                          ${GRAFANA_LOCAL}/
                    """
                }
            }
        }

        stage('Commit & Push to Git') {
            steps {
                echo "üíæ Committing & pushing configs to Git..."
                sh """
                  set -e
                  git add ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}
                  if git diff --cached --quiet; then
                    echo "‚úÖ No changes to commit."
                  else
                    git commit -m "Backup configs from '${HOST_NAME}' at \$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
                    git push origin HEAD:main
                  fi
                """
            }
        }
    }

    post {
        success { echo "‚úÖ Backup pipeline completed." }
        failure { echo "‚ùå Backup pipeline failed ‚Äì check the logs." }
    }
}
