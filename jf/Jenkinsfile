pipeline {
  agent { label 'slave' }

  environment {
    INVENTORY_FILE   = 'ansible/inventories/hosts.yml'
    HOST_NAME        = 'server'
    SSH_BASE         = '/var/jenkins_home/.ssh'

    HASS_LOCAL       = 'hass-config'
    DASHY_LOCAL      = 'dashy-config'
    GRAFANA_LOCAL    = 'grafana-config'

    REMOTE_KUBECONFIG = '/etc/rancher/k3s/k3s.yaml'
  }

  stages {
    stage('Checkout Repo') {
      steps {
        checkout scm
      }
    }

    stage('Parse Inventory') {
      steps {
        script {
          def inv = readYaml file: "${INVENTORY_FILE}"
          def hostEntry = inv.all.children.values()
                             .find { it.hosts?.containsKey(HOST_NAME) }
                             ?.hosts[HOST_NAME]
          if (!hostEntry) {
            error "Host '${HOST_NAME}' not found in inventory"
          }
          env.REMOTE_HOST = hostEntry.ansible_host
          env.REMOTE_USER = hostEntry.ansible_user
          echo "➡ Target: ${env.REMOTE_USER}@${env.REMOTE_HOST}"
        }
      }
    }

    stage('Clean old configs') {
      steps {
        sh "rm -rf ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}"
      }
    }

    stage('Fetch configs via SSH+kubectl') {
      steps {
        script {
          sh '''

            # --- manualny key path wg Twojego 1. punktu ---
            KEY_PATH="${SSH_BASE}/${HOST_NAME}/id_rsa"

            # --- Home Assistant ---
            mkdir -p "${HASS_LOCAL}"
            HA_POD=$(ssh -i "${KEY_PATH}" -o StrictHostKeyChecking=no \
              "${REMOTE_USER}@${REMOTE_HOST}" \
              "export KUBECONFIG=${REMOTE_KUBECONFIG} && kubectl -n home get pod -l app.kubernetes.io/instance=home-assistant -o jsonpath='{.items[0].metadata.name}'")
            echo "Found Home Assistant pod: ${HA_POD}"
            if [ -n "${HA_POD}" ]; then
              ssh -i "${KEY_PATH}" -o StrictHostKeyChecking=no \
                "${REMOTE_USER}@${REMOTE_HOST}" \
                "export KUBECONFIG=${REMOTE_KUBECONFIG} && kubectl -n home cp ${HA_POD}:/config -" \
                | tar -xz -C "${HASS_LOCAL}"
            else
              echo "⚠️ Home Assistant pod not found; skipping."
            fi

            # --- Dashy ---
            mkdir -p "${DASHY_LOCAL}"
            DASHY_POD=$(ssh -i "${KEY_PATH}" -o StrictHostKeyChecking=no \
              "${REMOTE_USER}@${REMOTE_HOST}" \
              "export KUBECONFIG=${REMOTE_KUBECONFIG} && kubectl -n monitoring get pod -l app.kubernetes.io/instance=dashy -o jsonpath='{.items[0].metadata.name}'")
            echo "Found Dashy pod: ${DASHY_POD}"
            if [ -n "${DASHY_POD}" ]; then
              ssh -i "${KEY_PATH}" -o StrictHostKeyChecking=no \
                "${REMOTE_USER}@${REMOTE_HOST}" \
                "export KUBECONFIG=${REMOTE_KUBECONFIG} && kubectl -n monitoring cp ${DASHY_POD}:/app/public/conf.yml -" \
                > "${DASHY_LOCAL}/conf.yml"
            else
              echo "⚠️ Dashy pod not found; skipping."
            fi

            # --- Grafana ---
            mkdir -p "${GRAFANA_LOCAL}"
            GRAFANA_POD=$(ssh -i "${KEY_PATH}" -o StrictHostKeyChecking=no \
              "${REMOTE_USER}@${REMOTE_HOST}" \
              "export KUBECONFIG=${REMOTE_KUBECONFIG} && kubectl -n monitoring get pod -l app.kubernetes.io/instance=grafana -o jsonpath='{.items[0].metadata.name}'")
            echo "Found Grafana pod: ${GRAFANA_POD}"
            if [ -n "${GRAFANA_POD}" ]; then
              ssh -i "${KEY_PATH}" -o StrictHostKeyChecking=no \
                "${REMOTE_USER}@${REMOTE_HOST}" \
                "export KUBECONFIG=${REMOTE_KUBECONFIG} && kubectl -n monitoring cp ${GRAFANA_POD}:/var/lib/grafana -" \
                | tar -xz -C "${GRAFANA_LOCAL}"
            else
              echo "⚠️ Grafana pod not found; skipping."
            fi
          '''
        }
      }
    }

    stage('Commit & Push to Git') {
      steps {
        sh '''
          git add ${HASS_LOCAL} ${DASHY_LOCAL} ${GRAFANA_LOCAL}
          if git diff --cached --quiet; then
            echo "✅ No changes to commit."
          else
            git commit -m "Backup configs from ${HOST_NAME}: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push origin HEAD:main
          fi
        '''
      }
    }
  }

  post {
    success {
      echo "✅ Pipeline completed."
    }
    failure {
      echo "❌ Pipeline failed! Check the logs above."
    }
  }
}
